<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on CS559: Workbook 4</title>
    <link>/</link>
    <description>Recent content in Introduction on CS559: Workbook 4</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/docs/five/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/five/</guid>
      <description>Lots of Flying Objects This page and it&amp;rsquo;s exercise and bonus problems are more about graphics programming than fundamental graphics concepts.
If you want to play with the end results, try some circa-2008 sample code here. Because your computer is probably 10,000 faster than the one it was written on in 2008, you probably want to lower the velocity. We don&amp;rsquo;t recommend trying to read the code! It&amp;rsquo;s archaic JavaScript.</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/four/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/four/</guid>
      <description>Matrix Exercises Over the past few pages, you saw the connection between the math of transformations and the code we write to draw using Canvas. On this page, you&amp;rsquo;ll get to try writing some code to test it out.
For this page, you should edit the file for_students/4-Matrix-Exercise.js. The functions you have to change are at the beginning of the file. Feel free to read the rest of the code - but please don&amp;rsquo;t change it.</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/one/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/one/</guid>
      <description>Transformations as Math vs. Code When working with Canvas, we write lots of code that refers to the positions of points using things such as context.moveTo(x,y), context.lineTo(x,y) or context.fillRect(x,y,w,h). In these cases, we pass points as a pair of numbers (x,y).
When thinking about points, it is easier notation to write points directly. So we can use a variable p to refer to a point. In terms of implementation, we might represent p as an array (of length 2 for 2D), or as an object with members for x and y.</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/three/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/three/</guid>
      <description>Matrices in Code Vectors and Matrices in JavaScript By itself, JavaScript doesn&amp;rsquo;t deal with matrices very well. We will almost always want to use a library that implements matrices. However, for now, we will do it ourselves. Part of this is so that we don&amp;rsquo;t need to take the time to learn about a matrix library until later in the class when we&amp;rsquo;ll get one as part of a graphics API.</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/two/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/two/</guid>
      <description>Linear, Affine, Projective On this page, we&amp;rsquo;ll finally get to doing things in terms of vector / linear algebra.
Again, this is more of a review than a workbook. Read it to have the notation that we can use going forward.
Linear Transformations Many useful transformations can be written as linear combinations of the input variables. $$ x&#39; = ax + by $$ $$ y&#39; = cx + dy $$ The &amp;ldquo;new x&amp;rdquo; is some multiple of the old x, added to some multiple of the old y.</description>
    </item>
    
  </channel>
</rss>